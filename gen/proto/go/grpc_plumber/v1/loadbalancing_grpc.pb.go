// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: grpc_plumber/v1/loadbalancing.proto

package grpc_plumberv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	LoadBalancingService_GetHostname_FullMethodName = "/grpc_plumber.v1.LoadBalancingService/GetHostname"
	LoadBalancingService_SetKey_FullMethodName      = "/grpc_plumber.v1.LoadBalancingService/SetKey"
	LoadBalancingService_GetKey_FullMethodName      = "/grpc_plumber.v1.LoadBalancingService/GetKey"
)

// LoadBalancingServiceClient is the client API for LoadBalancingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// LoadBalancingService provides methods to test load balancing behavior, or
// sticky sessions, by returning the server's hostname and allowing setting and
// getting key-value pairs in memory.
type LoadBalancingServiceClient interface {
	// GetHostname returns the server's hostname.
	GetHostname(ctx context.Context, in *GetHostnameRequest, opts ...grpc.CallOption) (*GetHostnameResponse, error)
	// SetKey sets a key-value pair in the server's memory.
	SetKey(ctx context.Context, in *SetKeyRequest, opts ...grpc.CallOption) (*SetKeyResponse, error)
	// GetKey retrieves the value for a given key.
	GetKey(ctx context.Context, in *GetKeyRequest, opts ...grpc.CallOption) (*GetKeyResponse, error)
}

type loadBalancingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLoadBalancingServiceClient(cc grpc.ClientConnInterface) LoadBalancingServiceClient {
	return &loadBalancingServiceClient{cc}
}

func (c *loadBalancingServiceClient) GetHostname(ctx context.Context, in *GetHostnameRequest, opts ...grpc.CallOption) (*GetHostnameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHostnameResponse)
	err := c.cc.Invoke(ctx, LoadBalancingService_GetHostname_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancingServiceClient) SetKey(ctx context.Context, in *SetKeyRequest, opts ...grpc.CallOption) (*SetKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetKeyResponse)
	err := c.cc.Invoke(ctx, LoadBalancingService_SetKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *loadBalancingServiceClient) GetKey(ctx context.Context, in *GetKeyRequest, opts ...grpc.CallOption) (*GetKeyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetKeyResponse)
	err := c.cc.Invoke(ctx, LoadBalancingService_GetKey_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoadBalancingServiceServer is the server API for LoadBalancingService service.
// All implementations must embed UnimplementedLoadBalancingServiceServer
// for forward compatibility.
//
// LoadBalancingService provides methods to test load balancing behavior, or
// sticky sessions, by returning the server's hostname and allowing setting and
// getting key-value pairs in memory.
type LoadBalancingServiceServer interface {
	// GetHostname returns the server's hostname.
	GetHostname(context.Context, *GetHostnameRequest) (*GetHostnameResponse, error)
	// SetKey sets a key-value pair in the server's memory.
	SetKey(context.Context, *SetKeyRequest) (*SetKeyResponse, error)
	// GetKey retrieves the value for a given key.
	GetKey(context.Context, *GetKeyRequest) (*GetKeyResponse, error)
	mustEmbedUnimplementedLoadBalancingServiceServer()
}

// UnimplementedLoadBalancingServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedLoadBalancingServiceServer struct{}

func (UnimplementedLoadBalancingServiceServer) GetHostname(context.Context, *GetHostnameRequest) (*GetHostnameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHostname not implemented")
}
func (UnimplementedLoadBalancingServiceServer) SetKey(context.Context, *SetKeyRequest) (*SetKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetKey not implemented")
}
func (UnimplementedLoadBalancingServiceServer) GetKey(context.Context, *GetKeyRequest) (*GetKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKey not implemented")
}
func (UnimplementedLoadBalancingServiceServer) mustEmbedUnimplementedLoadBalancingServiceServer() {}
func (UnimplementedLoadBalancingServiceServer) testEmbeddedByValue()                              {}

// UnsafeLoadBalancingServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoadBalancingServiceServer will
// result in compilation errors.
type UnsafeLoadBalancingServiceServer interface {
	mustEmbedUnimplementedLoadBalancingServiceServer()
}

func RegisterLoadBalancingServiceServer(s grpc.ServiceRegistrar, srv LoadBalancingServiceServer) {
	// If the following call pancis, it indicates UnimplementedLoadBalancingServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&LoadBalancingService_ServiceDesc, srv)
}

func _LoadBalancingService_GetHostname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHostnameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancingServiceServer).GetHostname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadBalancingService_GetHostname_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancingServiceServer).GetHostname(ctx, req.(*GetHostnameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancingService_SetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancingServiceServer).SetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadBalancingService_SetKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancingServiceServer).SetKey(ctx, req.(*SetKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LoadBalancingService_GetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoadBalancingServiceServer).GetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LoadBalancingService_GetKey_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoadBalancingServiceServer).GetKey(ctx, req.(*GetKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LoadBalancingService_ServiceDesc is the grpc.ServiceDesc for LoadBalancingService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoadBalancingService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_plumber.v1.LoadBalancingService",
	HandlerType: (*LoadBalancingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHostname",
			Handler:    _LoadBalancingService_GetHostname_Handler,
		},
		{
			MethodName: "SetKey",
			Handler:    _LoadBalancingService_SetKey_Handler,
		},
		{
			MethodName: "GetKey",
			Handler:    _LoadBalancingService_GetKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc_plumber/v1/loadbalancing.proto",
}
