// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: grpc_plumber/v1/timeouts.proto

package grpc_plumberv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TimeoutService_SlowUnary_FullMethodName             = "/grpc_plumber.v1.TimeoutService/SlowUnary"
	TimeoutService_SlowServerStream_FullMethodName      = "/grpc_plumber.v1.TimeoutService/SlowServerStream"
	TimeoutService_SlowClientStream_FullMethodName      = "/grpc_plumber.v1.TimeoutService/SlowClientStream"
	TimeoutService_SlowBiDirectionStream_FullMethodName = "/grpc_plumber.v1.TimeoutService/SlowBiDirectionStream"
)

// TimeoutServiceClient is the client API for TimeoutService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimeoutServiceClient interface {
	SlowUnary(ctx context.Context, in *SlowUnaryRequest, opts ...grpc.CallOption) (*SlowUnaryResponse, error)
	SlowServerStream(ctx context.Context, in *SlowServerStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SlowServerStreamResponse], error)
	SlowClientStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SlowClientStreamRequest, SlowClientStreamResponse], error)
	SlowBiDirectionStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SlowBiDirectionStreamRequest, SlowBiDirectionStreamResponse], error)
}

type timeoutServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTimeoutServiceClient(cc grpc.ClientConnInterface) TimeoutServiceClient {
	return &timeoutServiceClient{cc}
}

func (c *timeoutServiceClient) SlowUnary(ctx context.Context, in *SlowUnaryRequest, opts ...grpc.CallOption) (*SlowUnaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SlowUnaryResponse)
	err := c.cc.Invoke(ctx, TimeoutService_SlowUnary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timeoutServiceClient) SlowServerStream(ctx context.Context, in *SlowServerStreamRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SlowServerStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TimeoutService_ServiceDesc.Streams[0], TimeoutService_SlowServerStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SlowServerStreamRequest, SlowServerStreamResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TimeoutService_SlowServerStreamClient = grpc.ServerStreamingClient[SlowServerStreamResponse]

func (c *timeoutServiceClient) SlowClientStream(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SlowClientStreamRequest, SlowClientStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TimeoutService_ServiceDesc.Streams[1], TimeoutService_SlowClientStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SlowClientStreamRequest, SlowClientStreamResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TimeoutService_SlowClientStreamClient = grpc.ClientStreamingClient[SlowClientStreamRequest, SlowClientStreamResponse]

func (c *timeoutServiceClient) SlowBiDirectionStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[SlowBiDirectionStreamRequest, SlowBiDirectionStreamResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &TimeoutService_ServiceDesc.Streams[2], TimeoutService_SlowBiDirectionStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SlowBiDirectionStreamRequest, SlowBiDirectionStreamResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TimeoutService_SlowBiDirectionStreamClient = grpc.BidiStreamingClient[SlowBiDirectionStreamRequest, SlowBiDirectionStreamResponse]

// TimeoutServiceServer is the server API for TimeoutService service.
// All implementations must embed UnimplementedTimeoutServiceServer
// for forward compatibility.
type TimeoutServiceServer interface {
	SlowUnary(context.Context, *SlowUnaryRequest) (*SlowUnaryResponse, error)
	SlowServerStream(*SlowServerStreamRequest, grpc.ServerStreamingServer[SlowServerStreamResponse]) error
	SlowClientStream(grpc.ClientStreamingServer[SlowClientStreamRequest, SlowClientStreamResponse]) error
	SlowBiDirectionStream(grpc.BidiStreamingServer[SlowBiDirectionStreamRequest, SlowBiDirectionStreamResponse]) error
	mustEmbedUnimplementedTimeoutServiceServer()
}

// UnimplementedTimeoutServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTimeoutServiceServer struct{}

func (UnimplementedTimeoutServiceServer) SlowUnary(context.Context, *SlowUnaryRequest) (*SlowUnaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SlowUnary not implemented")
}
func (UnimplementedTimeoutServiceServer) SlowServerStream(*SlowServerStreamRequest, grpc.ServerStreamingServer[SlowServerStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SlowServerStream not implemented")
}
func (UnimplementedTimeoutServiceServer) SlowClientStream(grpc.ClientStreamingServer[SlowClientStreamRequest, SlowClientStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SlowClientStream not implemented")
}
func (UnimplementedTimeoutServiceServer) SlowBiDirectionStream(grpc.BidiStreamingServer[SlowBiDirectionStreamRequest, SlowBiDirectionStreamResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SlowBiDirectionStream not implemented")
}
func (UnimplementedTimeoutServiceServer) mustEmbedUnimplementedTimeoutServiceServer() {}
func (UnimplementedTimeoutServiceServer) testEmbeddedByValue()                        {}

// UnsafeTimeoutServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimeoutServiceServer will
// result in compilation errors.
type UnsafeTimeoutServiceServer interface {
	mustEmbedUnimplementedTimeoutServiceServer()
}

func RegisterTimeoutServiceServer(s grpc.ServiceRegistrar, srv TimeoutServiceServer) {
	// If the following call pancis, it indicates UnimplementedTimeoutServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TimeoutService_ServiceDesc, srv)
}

func _TimeoutService_SlowUnary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SlowUnaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeoutServiceServer).SlowUnary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TimeoutService_SlowUnary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeoutServiceServer).SlowUnary(ctx, req.(*SlowUnaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TimeoutService_SlowServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SlowServerStreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TimeoutServiceServer).SlowServerStream(m, &grpc.GenericServerStream[SlowServerStreamRequest, SlowServerStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TimeoutService_SlowServerStreamServer = grpc.ServerStreamingServer[SlowServerStreamResponse]

func _TimeoutService_SlowClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TimeoutServiceServer).SlowClientStream(&grpc.GenericServerStream[SlowClientStreamRequest, SlowClientStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TimeoutService_SlowClientStreamServer = grpc.ClientStreamingServer[SlowClientStreamRequest, SlowClientStreamResponse]

func _TimeoutService_SlowBiDirectionStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TimeoutServiceServer).SlowBiDirectionStream(&grpc.GenericServerStream[SlowBiDirectionStreamRequest, SlowBiDirectionStreamResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type TimeoutService_SlowBiDirectionStreamServer = grpc.BidiStreamingServer[SlowBiDirectionStreamRequest, SlowBiDirectionStreamResponse]

// TimeoutService_ServiceDesc is the grpc.ServiceDesc for TimeoutService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TimeoutService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_plumber.v1.TimeoutService",
	HandlerType: (*TimeoutServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SlowUnary",
			Handler:    _TimeoutService_SlowUnary_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SlowServerStream",
			Handler:       _TimeoutService_SlowServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SlowClientStream",
			Handler:       _TimeoutService_SlowClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SlowBiDirectionStream",
			Handler:       _TimeoutService_SlowBiDirectionStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "grpc_plumber/v1/timeouts.proto",
}
